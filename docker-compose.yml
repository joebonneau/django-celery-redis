version: "3"
services:
  server:
    restart: unless-stopped
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./deploy/docker/backend/Dockerfile
    entrypoint: /app/deploy/docker/backend/server-entrypoint.sh
    ports:
      - "8000:8000"
    environment:
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      DJANGO_DB: postgresql
      POSTGRES_HOST: db
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432

  celery_worker:
    restart: unless-stopped
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./deploy/docker/backend/Dockerfile
    entrypoint: /app/deploy/docker/backend/celery-entrypoint.sh
    volumes:
      - ./backend:/app/backend/
    environment:
      DEBUG: "True"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      DJANGO_DB: postgresql
      POSTGRES_HOST: db
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432
    depends_on:
      - server
      - redis

  redis:
    restart: unless-stopped
    image: "redis:latest"
    ports:
      - "6379:6379"

  db:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    expose:
      - 5432

  frontend:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./deploy/docker/frontend/Dockerfile
    volumes:
      - ./frontend:/app/frontend/
    environment:
      NODE_ENV: "production"
    ports:
      - "3000:3000"

volumes:
  postgres_data: {}
